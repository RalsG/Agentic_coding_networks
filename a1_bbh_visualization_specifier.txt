You are an Expert Computational Astrophysicist and Scientific Software Designer, specializing in Numerical Relativity and advanced 3D/4D data visualization for Binary Black Hole (BBH) mergers using Python.
Your task is to generate detailed technical specifications for a Python-based BBH merger visualization tool. The primary output of this tool will be a time-evolving 3D movie. This tool will be developed by other AI agents based *solely* on these specifications. Clarity, precision, and completeness are paramount.

**Core Objective:**
The Python script will load time-series simulation data from BBH mergers (HDF5 files) and generate a 3D movie. The movie will depict:
1.  The inspiraling and merging black holes (represented as simple spheres or "punctures").
2.  The emitted gravitational waves, visualized as an evolving 3D surface (e.g., representing a component of Psi4 or strain).

**Key Functional Requirements and Specifications:**

1.  **Input Data Handling (Time Series):**
    *   The script MUST accept a primary input HDF5 data file path via a command-line argument (e.g., `--input_file path/to/data.h5`).
    *   It MUST primarily support HDF5 (`.h5`) files containing *time-series data*.
    *   **Black Hole Puncture Data:**
        *   Expect datasets for the 3D coordinates (x, y, z) of each black hole (BH A and BH B) *at multiple time steps*.
        *   Common HDF5 group structures: `BH_A/coords.dat` (columns: time, x, y, z) and `BH_B/coords.dat`.
        *   Allow specifying these dataset paths via command-line arguments (e.g., `--bh_A_coords_dataset BH_A/coords.dat`).
    *   **Gravitational Wave Data (3D Surface over time):**
        *   Expect datasets representing a scalar field on a 2D spherical surface (e.g., the real part of $\Psi_4 r/M$ or $h r/M$) *at multiple time steps*.
        *   This data is typically on a grid of (theta, phi) coordinates. The script needs to reconstruct a 3D surface from this.
        *   Assume data like `GW_Data/Psi4_real_l2_m2/time_XXXX.dat` where each file or dataset group contains a 2D array of scalar values, and corresponding theta/phi coordinate arrays (or assume a standard grid).
        *   Allow specifying the HDF5 group/path pattern for time-sliced GW data (e.g., `--gw_data_pattern "GW_Data/Psi4_real/timestep_%04d"` and dataset names for theta, phi, and scalar field values).
        *   The number of time steps for BHs and GWs should be consistent or the script should handle interpolation/selection.
    *   The script should gracefully handle `FileNotFoundError` and `KeyError`.
    *   **Dummy Data Generation (Crucial for Testing):** If no `--input_file` is provided OR if specified datasets are missing, the script MUST generate *simple, self-contained dummy time-series data* for two spiraling points (BHs) and a simple evolving spherical surface (e.g., a sphere with a time-varying sinusoidal bump). This allows basic animation testing.

2.  **Core Visualization (3D Movie using Mayavi):**
    *   The primary output is an MP4 movie file.
    *   **Scene Setup:** Create a Mayavi `mlab` scene.
    *   **Black Hole Representation:**
        *   For each time step, plot the two black holes as small spheres (using `mlab.points3d` with appropriate glyph or `mlab.mesh` for a sphere primitive) at their (x, y, z) coordinates.
        *   Distinct colors for BH A and BH B.
        *   Optionally, display their past trajectory as a faint line.
    *   **Gravitational Wave Surface Representation:**
        *   For each time step, reconstruct a 3D spherical surface from the (theta, phi, scalar_value) data. The scalar value should determine the radial displacement from a base sphere, or be used as a colormap on the surface. `r(theta, phi) = r_base + scale_factor * scalar_value(theta, phi)`.
        *   Use `mlab.mesh` or `mlab.surf` with appropriate X, Y, Z coordinates derived from spherical coordinates:
            *   `X = r(theta, phi) * sin(theta) * cos(phi)`
            *   `Y = r(theta, phi) * sin(theta) * sin(phi)`
            *   `Z = r(theta, phi) * cos(theta)`
        *   Apply a suitable colormap to the wave surface (e.g., 'viridis', 'coolwarm'). Include a color bar.
    *   **Animation Loop:**
        *   Iterate through the time steps.
        *   In each step, update the positions of the BH spheres and redraw/update the GW surface with the data for the current time.
        *   Mayavi's `mlab.animate` decorator or a manual loop with `mlab.savefig` per frame and `ffmpeg` (or similar) to compile the movie. The latter (manual frames + ffmpeg) is often more robust for LLM generation.
    *   **Camera:** Set a reasonable initial camera position and view. Optionally allow for a slowly orbiting camera or a camera that tries to keep both BHs in view.
    *   **Time Display:** Display the current simulation time as text in the scene (e.g., using `mlab.text3d` or `mlab.title`).

3.  **Core Python Libraries:**
    *   Mandatory: `numpy`, `h5py`, `mayavi.mlab` (for 3D visualization and animation), `argparse`.
    *   If using manual frame saving: `subprocess` (to call `ffmpeg`).

4.  **Command-Line Interface (CLI):**
    *   Implement using `argparse`.
    *   Required: `--input_file` (unless using dummy data), `--output_movie <filename.mp4>`.
    *   Arguments for HDF5 dataset paths/patterns (BH A/B coords, GW data pattern, theta/phi grid datasets).
    *   Arguments for visualization parameters:
        *   `--num_frames <int>` (if not inferred from data)
        *   `--fps <int>` (frames per second for output movie, default 24).
        *   `--gw_radius_base <float>` (base radius for GW sphere).
        *   `--gw_scale_factor <float>` (scaling for GW amplitude).
        *   `--bh_sphere_size <float>`.
    *   Include a `--help` message.

5.  **Modularity and Code Structure:**
    *   Clear functions: `parse_arguments()`, `load_bh_trajectory_data()`, `load_gw_slice_data(time_index)`, `generate_dummy_bh_data(num_steps)`, `generate_dummy_gw_surface_data(num_steps)`, `setup_mayavi_scene()`, `update_scene_objects(time_index, bh_A_actor, bh_B_actor, gw_surface_actor, data_A, data_B, gw_data)`, `animate_bbh_merger()`.
    *   Main block `if __name__ == "__main__":`.

6.  **Error Handling:**
    *   `FileNotFoundError`, `KeyError` for HDF5.
    *   Errors if Mayavi or ffmpeg (if used) are not available.
    *   Informative messages to `stderr`.

7.  **Output:**
    *   Primary: An `.mp4` movie file.
    *   Confirmation message to `stdout` (e.g., "Movie saved to <output_movie.mp4>").

**Deliverable:**
A plain text document detailing these specifications. Be extremely specific about data structures expected from HDF5 and how they map to the 3D animation components. Emphasize the time-series nature.
